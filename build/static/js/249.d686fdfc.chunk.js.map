{"version":3,"sources":["views/apps/ro-configuration/PaymentModeList.js"],"names":["PaymentModeList","props","state","data","rowData","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","field","width","cellRendererFramework","params","className","select_bank","name_of_bank","select_mode","settlement_day","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","id","this","match","axiosConfig","get","then","response","console","log","setState","catch","error","Fragment","col-sm-6","tag","currenPageSize","getPageSize","length","right","filterSize","placeholder","onChange","e","updateSearchQuery","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","onGridReady","colResizeDefault","animateRows","floatingFilter","pagination","paginationPageSize","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"qXAsBMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAS,GACTC,cAAe,CACbC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,cAAc,GAEhBC,WAAY,CACV,CACEC,WAAY,cACZC,MAAO,2BACPC,MAAO,IACPC,sBAAuB,SAACC,GAAY,IAAD,EACjC,OACE,yBAAKC,UAAU,iCACb,wCAAOD,EAAOZ,KAAKc,mBAAnB,aAAO,EAAyBC,iBAKxC,CACEP,WAAY,cACZC,MAAO,cACPC,MAAO,IACPC,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOZ,KAAKgB,gBAM3B,CACER,WAAY,iBACZC,MAAO,iBACPC,MAAO,IACPC,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOZ,KAAKiB,mBAK3B,CACET,WAAY,UACZC,MAAO,YACPC,MAAO,IACPC,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,0BAeb,kBAAC,IAAD,CACEK,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACN,kBAAC,IAAD,CACEN,UAAU,QACVO,KAAK,OACLC,MAAM,OACNC,QAAS,kBACPH,EAAQI,KAAR,oDAC+CX,EAAOZ,KAAKwB,YAMnE,kBAAC,IAAD,CACEX,UAAU,QACVO,KAAK,OACLC,MAAM,MACNC,QAAS,WACP,IAAIG,EAAe,EAAKC,QAAQC,kBAChC,EAAKC,gBAAgBhB,EAAOZ,KAAKwB,KACjC,EAAKE,QAAQG,cAAc,CAAEC,OAAQL,YA3FpC,E,qDAqGnB,WAAqB,IAAD,OACZM,EAAOC,KAAKlC,MAAMmC,MAAMrB,OAAxBmB,GACNG,IACGC,IADH,gCACgCJ,IAC7BK,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,IAGd,IAAMvC,EAAUoC,EAASrC,KAAKA,KAC9BsC,QAAQC,IAAItC,GACZ,EAAKuC,SAAS,CAAEvC,eAEjBwC,OAAM,SAACC,GACNJ,QAAQC,IAAIG,EAAML,e,oBAIxB,WAAU,IAAD,OACP,EAA+CL,KAAKjC,MAA5CE,EAAR,EAAQA,QAASM,EAAjB,EAAiBA,WAAYL,EAA7B,EAA6BA,cAC7B,OACE,kBAAC,IAAMyC,SAAP,KACE,6BACE,kBAAC,IAAD,CAAM9B,UAAU,+BAChB,kBAAC,IAAD,CAAKA,UAAU,OACb,kBAAC,IAAD,KACE,wBAAI+B,YAAA,EAAS/B,UAAU,cAAvB,2BAKF,kBAAC,IAAD,CAAUA,UAAU,QACM,OAAvBmB,KAAKjC,MAAME,QAAmB,KAC7B,yBAAKY,UAAU,8CACb,yBAAKA,UAAU,+DACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAsBA,UAAU,mBAC9B,kBAAC,IAAD,CAAgBgC,IAAI,OACjBb,KAAKN,QACFM,KAAKjC,MAAM+C,eACX,GAAKd,KAAKjC,MAAMgD,aACff,KAAKjC,MAAMgD,YAAc,GAAI,IAJpC,IAKI,IACDf,KAAKjC,MAAME,QAAQ+C,OAClBhB,KAAKjC,MAAM+C,eAAiBd,KAAKjC,MAAMgD,YACzC,EACIf,KAAKjC,MAAM+C,eAAiBd,KAAKjC,MAAMgD,YACvCf,KAAKjC,MAAME,QAAQ+C,OAAQ,IAVjC,MAWMhB,KAAKjC,MAAME,QAAQ+C,OACvB,kBAAC,IAAD,CAAanC,UAAU,QAAQO,KAAM,MAEvC,kBAAC,IAAD,CAAc6B,OAAK,GACjB,kBAAC,IAAD,CACEJ,IAAI,MACJvB,QAAS,kBAAM,EAAK4B,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEL,IAAI,MACJvB,QAAS,kBAAM,EAAK4B,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEL,IAAI,MACJvB,QAAS,kBAAM,EAAK4B,WAAW,OAFjC,OAMA,kBAAC,IAAD,CACEL,IAAI,MACJvB,QAAS,kBAAM,EAAK4B,WAAW,OAFjC,UASN,yBAAKrC,UAAU,iDACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACEsC,YAAY,YACZC,SAAU,SAACC,GAAD,OACR,EAAKC,kBAAkBD,EAAEE,OAAOC,QAElCA,MAAOxB,KAAKjC,MAAMyD,SAGtB,yBAAK3C,UAAU,cACb,kBAAC,IAAO4C,OAAR,CACEpC,MAAM,UACNC,QAAS,kBAAM,EAAKI,QAAQgC,oBAF9B,oBASN,kBAAC,IAAcC,SAAf,MACG,SAACC,GAAD,OACC,kBAAC,cAAD,CACEC,YAAa,GACbC,aAAa,WACb5D,cAAeA,EACfK,WAAYA,EACZN,QAASA,EACT8D,YAAa,EAAKA,YAClBC,iBAAkB,QAClBC,aAAa,EACbC,gBAAgB,EAChBC,YAAY,EACZC,mBAAoB,EAAKrE,MAAMqE,mBAC/BC,eAAe,SACfC,UAAuC,QAA5BV,EAAQ7D,MAAMwE,wB,GAxNnBC,IAAMC,WAqOrB5E","file":"static/js/249.d686fdfc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Row, \r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { ChevronDown } from \"react-feather\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport { Trash2, Edit } from \"react-feather\";\r\n// import { history } from \"../../../history\";\r\nimport { Route } from \"react-router-dom\";\r\nclass PaymentModeList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: {},\r\n      rowData: [],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        editable: true,\r\n        resizable: true,\r\n        suppressMenu: true,\r\n      },\r\n      columnDefs: [\r\n        {\r\n          headerName: \"Select Bank\",\r\n          field: \"select_bank.name_of_bank\",\r\n          width: 140,\r\n          cellRendererFramework: (params) => {\r\n            return (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <span>{params.data.select_bank?.name_of_bank}</span>\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          headerName: \"Select Mode\",\r\n          field: \"select_mode\",\r\n          width: 140,\r\n          cellRendererFramework: (params) => {\r\n            return (\r\n              <div className=\"d-flex align-items-center cursor-pointer\">\r\n                <span>{params.data.select_mode}</span>\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n\r\n        {\r\n          headerName: \"Settlement Day\",\r\n          field: \"settlement_day\",\r\n          width: 140,\r\n          cellRendererFramework: (params) => {\r\n            return (\r\n              <div className=\"d-flex align-items-center cursor-pointer\">\r\n                <span>{params.data.settlement_day}</span>\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          headerName: \"Actions\",\r\n          field: \"sortorder\",\r\n          width: 140,\r\n          cellRendererFramework: (params) => {\r\n            return (\r\n              <div className=\"actions cursor-pointer\">\r\n                {/* <Route\r\n                  render={({ history }) => (\r\n                    <Eye\r\n                      className=\"mr-50\"\r\n                      size=\"25px\"\r\n                      color=\"green\"\r\n                      onClick={() =>\r\n                        history.push(\r\n                          `/app/ro-configuration/paymentModeList/${params.data.dealer_id._id}`\r\n                        )\r\n                      }\r\n                    />\r\n                  )}\r\n                /> */}\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Edit\r\n                      className=\"mr-50\"\r\n                      size=\"25px\"\r\n                      color=\"blue\"\r\n                      onClick={() =>\r\n                        history.push(\r\n                          `/app/ro-configuration/paymentModeAvalable/${params.data._id}`\r\n                        )\r\n                      }\r\n                    />\r\n                  )}\r\n                />\r\n                <Trash2\r\n                  className=\"mr-50\"\r\n                  size=\"25px\"\r\n                  color=\"red\"\r\n                  onClick={() => {\r\n                    let selectedData = this.gridApi.getSelectedRows();\r\n                    this.runthisfunction(params.data._id);\r\n                    this.gridApi.updateRowData({ remove: selectedData });\r\n                  }}\r\n                />\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let { id } = this.props.match.params;\r\n    axiosConfig\r\n      .get(`/dealer/allpaymentApp/${id}`)\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.setState({\r\n      \r\n        });\r\n        const rowData = response.data.data;\r\n        console.log(rowData);\r\n        this.setState({ rowData });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <Card className=\"overflow-hidden agGrid-card\">\r\n          <Row className=\"m-1\">\r\n            <Col>\r\n              <h1 col-sm-6 className=\"float-left\">\r\n                 Payment Mode Avalable\r\n              </h1>\r\n            </Col>\r\n          </Row>\r\n            <CardBody className=\"py-0\">\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default PaymentModeList;\r\n\r\n// import React from \"react\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Input,\r\n//   Button,\r\n//   UncontrolledDropdown,\r\n//   DropdownMenu,\r\n//   DropdownItem,\r\n//   DropdownToggle,\r\n// } from \"reactstrap\";\r\n// import axiosConfig from \"../../../axiosConfig\";\r\n// // import { history } from \"../../../history\";\r\n// import { AgGridReact } from \"ag-grid-react\";\r\n// import { ContextLayout } from \"../../../utility/context/Layout\";\r\n// import { ChevronDown, Trash2, Edit } from \"react-feather\";\r\n// import \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\n// import { Route } from \"react-router-dom\";\r\n// class PaymentModeList extends React.Component {\r\n//   state = {\r\n//     rowData: [],\r\n//     paginationPageSize: 20,\r\n//     currenPageSize: \"\",\r\n//     getPageSize: \"\",\r\n//     defaultColDef: {\r\n//       sortable: true,\r\n//       editable: true,\r\n//       resizable: true,\r\n//       suppressMenu: true,\r\n//     },\r\n//     columnDefs: [\r\n//       {\r\n//         headerName: \"Dealer Name\",\r\n//         field: \"dealer_name1.dealer_name\",\r\n//         width: 150,\r\n//         pinned: window.innerWidth > 992 ? \"left\" : false,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.dealer_name1?.dealer_name}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Email\",\r\n//         field: \"dealer_name1.email\",\r\n//         width: 150,\r\n//         pinned: window.innerWidth > 992 ? \"left\" : false,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.dealer_name1?.email}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Select Bank\",\r\n//         field: \"select_bank.name_of_bank\",\r\n//         width: 140,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex justify-content-center\">\r\n//               <span>{params.data.select_bank?.name_of_bank}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Select Mode\",\r\n//         field: \"select_mode.mode\",\r\n//         width: 140,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.select_mode?.mode}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       // {\r\n//       //   headerName: \"Document Upload\",\r\n//       //   field: \"select_bank.document_upload\",\r\n//       //   width: 140,\r\n//       //   cellRendererFramework: (params) => {\r\n//       //     return (\r\n//       //       <div className=\"d-flex justify-content-center\">\r\n//       //         <span>{params.data.select_bank?.document_upload}</span>\r\n//       //       </div>\r\n//       //     );\r\n//       //   },\r\n//       // },\r\n//       {\r\n//         headerName: \"Settlement Day\",\r\n//         field: \"settlement_day\",\r\n//         width: 140,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.settlement_day}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Actions\",\r\n//         field: \"sortorder\",\r\n//         width: 140,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"actions cursor-pointer\">\r\n//               {/* <Eye\r\n//                 className=\"mr-50\"\r\n//                 size=\"25px\"\r\n//                 color=\"green\"\r\n//                 onClick={() => history.push(\"/app/ro-configuration/roForm\")}\r\n//               /> */}\r\n//               <Route\r\n//                 render={({ history }) => (\r\n//                   <Edit\r\n//                     className=\"mr-50\"\r\n//                     size=\"25px\"\r\n//                     color=\"blue\"\r\n//                     onClick={() =>\r\n//                       history.push(\r\n//                         `/app/ro-configuration/paymentModeAvalable/${params.data._id}`\r\n//                       )\r\n//                     }\r\n//                   />\r\n//                 )}\r\n//               />\r\n//               <Trash2\r\n//                 className=\"mr-50\"\r\n//                 size=\"25px\"\r\n//                 color=\"red\"\r\n//                 onClick={() => {\r\n//                   let selectedData = this.gridApi.getSelectedRows();\r\n//                   this.runthisfunction(params.data._id);\r\n//                   this.gridApi.updateRowData({ remove: selectedData });\r\n//                 }}\r\n//               />\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//     ],\r\n//   };\r\n//   async componentDidMount() {\r\n//     await axiosConfig.get(\"/dealer/allpayment\").then((response) => {\r\n//       const rowData = response.data.data;\r\n//       console.log(rowData);\r\n//       this.setState({ rowData });\r\n//     });\r\n//   }\r\n//   async runthisfunction(id) {\r\n//     console.log(id);\r\n//     await axiosConfig.get(`/dealer/deletepayment/${id}`).then((response) => {\r\n//       console.log(response);\r\n//     });\r\n//   }\r\n\r\n//   onGridReady = (params) => {\r\n//     this.gridApi = params.api;\r\n//     this.gridColumnApi = params.columnApi;\r\n//     this.setState({\r\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n//       getPageSize: this.gridApi.paginationGetPageSize(),\r\n//       totalPages: this.gridApi.paginationGetTotalPages(),\r\n//     });\r\n//   };\r\n\r\n//   updateSearchQuery = (val) => {\r\n//     this.gridApi.setQuickFilter(val);\r\n//   };\r\n\r\n//   filterSize = (val) => {\r\n//     if (this.gridApi) {\r\n//       this.gridApi.paginationSetPageSize(Number(val));\r\n//       this.setState({\r\n//         currenPageSize: val,\r\n//         getPageSize: val,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const { rowData, columnDefs, defaultColDef } = this.state;\r\n//     return (\r\n//       <React.Fragment>\r\n//         <Breadcrumbs\r\n//           breadCrumbTitle=\"Payment Mode List\"\r\n//           // breadCrumbParent=\"Forms & Tables\"\r\n//           // breadCrumbActive=\"Ro Configuration\"\r\n//         />\r\n//         <Card className=\"overflow-hidden agGrid-card\">\r\n//           <CardBody className=\"py-0\">\r\n//             {this.state.rowData === null ? null : (\r\n//               <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n//                 <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n//                   <div className=\"mb-1\">\r\n//                     <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n//                       <DropdownToggle tag=\"div\">\r\n//                         {this.gridApi\r\n//                           ? this.state.currenPageSize\r\n//                           : \"\" * this.state.getPageSize -\r\n//                             (this.state.getPageSize - 1)}{\" \"}\r\n//                         -{\" \"}\r\n//                         {this.state.rowData.length -\r\n//                           this.state.currenPageSize * this.state.getPageSize >\r\n//                         0\r\n//                           ? this.state.currenPageSize * this.state.getPageSize\r\n//                           : this.state.rowData.length}{\" \"}\r\n//                         of {this.state.rowData.length}\r\n//                         <ChevronDown className=\"ml-50\" size={15} />\r\n//                       </DropdownToggle>\r\n//                       <DropdownMenu right>\r\n//                         <DropdownItem\r\n//                           tag=\"div\"\r\n//                           onClick={() => this.filterSize(20)}\r\n//                         >\r\n//                           20\r\n//                         </DropdownItem>\r\n//                         <DropdownItem\r\n//                           tag=\"div\"\r\n//                           onClick={() => this.filterSize(50)}\r\n//                         >\r\n//                           50\r\n//                         </DropdownItem>\r\n//                         <DropdownItem\r\n//                           tag=\"div\"\r\n//                           onClick={() => this.filterSize(100)}\r\n//                         >\r\n//                           100\r\n//                         </DropdownItem>\r\n//                         <DropdownItem\r\n//                           tag=\"div\"\r\n//                           onClick={() => this.filterSize(134)}\r\n//                         >\r\n//                           134\r\n//                         </DropdownItem>\r\n//                       </DropdownMenu>\r\n//                     </UncontrolledDropdown>\r\n//                   </div>\r\n//                   <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n//                     <div className=\"table-input mr-1\">\r\n//                       <Input\r\n//                         placeholder=\"search...\"\r\n//                         onChange={(e) => this.updateSearchQuery(e.target.value)}\r\n//                         value={this.state.value}\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"export-btn\">\r\n//                       <Button.Ripple\r\n//                         color=\"primary\"\r\n//                         onClick={() => this.gridApi.exportDataAsCsv()}\r\n//                       >\r\n//                         Export as CSV\r\n//                       </Button.Ripple>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//                 <ContextLayout.Consumer>\r\n//                   {(context) => (\r\n//                     <AgGridReact\r\n//                       gridOptions={{}}\r\n//                       rowSelection=\"multiple\"\r\n//                       defaultColDef={defaultColDef}\r\n//                       columnDefs={columnDefs}\r\n//                       rowData={rowData}\r\n//                       onGridReady={this.onGridReady}\r\n//                       colResizeDefault={\"shift\"}\r\n//                       animateRows={true}\r\n//                       floatingFilter={true}\r\n//                       pagination={true}\r\n//                       paginationPageSize={this.state.paginationPageSize}\r\n//                       pivotPanelShow=\"always\"\r\n//                       enableRtl={context.state.direction === \"rtl\"}\r\n//                     />\r\n//                   )}\r\n//                 </ContextLayout.Consumer>\r\n//               </div>\r\n//             )}\r\n//           </CardBody>\r\n//         </Card>\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n// }\r\n// export default PaymentModeList;\r\n"],"sourceRoot":""}